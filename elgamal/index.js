import * as bigintCryptoUtils from 'bigint-crypto-utils';
import { BigInteger } from 'jsbn';
import crypto from 'crypto';

// const getRandomNum = (min, max) => {
//   const range = max.subtract(min).subtract(BigInteger.ONE);

//   let num;
//   do {
//     const buf = crypto.randomBytes(Math.ceil(range.bitLength() / 8));
//     num = new BigInteger(buf.toString('hex'), 16).add(min);
//   } while (num.compareTo(max) >= 0);

//   return num;
// }

function getRandomNumberInRange(min, max) {
  function genRandomNumber(byteCount, radix) {
    return BigInt('0x' + crypto.randomBytes(byteCount).toString('hex')).toString(radix)
  }
  const randomBytes = Math.round((max.bitLength() - 1) * Math.random() / 8);
  console.log(max.bitLength());
  const randomNumber = genRandomNumber(randomBytes, 10);
  return new BigInteger(randomNumber);
}

const generateKeys = async () => {
  const generatePrime = async (minBits, maxBits) => {
    //Calcultating the random number of bits to be in the p
    const bitLength = Math.floor(Math.random() * (maxBits - minBits + 1)) + minBits;
    //Finding prime number with bitLength number of bits
    const prime = await bigintCryptoUtils.prime(bitLength);
  
    return new BigInteger(String(prime));
  }
  
  
  const getPrimitiveRoots = (p) => {
    let g;
    do {
      g = getRandomNumberInRange(new BigInteger('3'), p);
    }
    while(
      g.modPowInt(2, p).equals(BigInteger.ONE)
    );
  
    return g;
  }

  const p = await generatePrime(2048, 4096);
  const g = getPrimitiveRoots(p);

  //Generating private key by taking random number in range from 1 to p - 1
  const a = getRandomNumberInRange(new BigInteger('1'), p.subtract(BigInteger.ONE));
  //Generating public key using b = g^a mod p
  const b = g.modPow(a, p);

  return { a, b, p, g }
}

const createSignature = (a, b, p, g, message) => {
  const k = getRandomNumberInRange(new BigInteger('1'), p.subtract(BigInteger.ONE));
  const r = g.modPow(k, p);

  //calculating s
  const hash = new BigInteger(crypto.createHash('sha256').update(message).digest('decimal'));
  console.log(hash)
  const pMinusOne = p.subtract(BigInteger.ONE);
  const inverseK = k.modInverse(pMinusOne);
  console.log(inverseK)
  const hashMinusAr = hash.subtract(a.multiply(r))
  const s = hashMinusAr.multiply(inverseK).mod(pMinusOne)
  console.log(s.toString());

  return { s, r };
}

const encrypt = (message, p) => {
  const k = getRandomNumberInRange(new BigInteger('1'), p.subtract(BigInteger.ONE));
  console.log(k.toString());
}

async function elGamal() {
  const message = 'Hello world';

  const { a, b, p, g } = await generateKeys();
  // const a = `751150111977905047191319420820147263859777334013600028288417570710823832051305310001329020036054757876002140541368789478247234448910477085342506692934927497569481114652227964797901812999372565657095735375102165219661285
  // 241323037279905567430138864826750926472823616575337996850614119383665694695324771384470293624221241234443927028452112978984778618187932344781063146884685425164368012040561242631142879583021430787925031203737402059015370
  // 036164343603443548917471707102051973469186860379688941517548670880270186104870882634998918229242587755726280036697227246521153168810612038197365726378715595154411385134344991371331688160205577345690323933647565209094083
  // 2058813770200145919306676662569246404`
  // const b = `264272012618575866965714666515078851132862619336737435653511006803680405887261867912153903396911171091371853575297592486150806870470858182337737964414111787440869764328541805173008635709092414012409870421280096190827314
  // 556515105792425749217889455523197428762417785369713606001251353278497925596134255049210268150760968014627224893931760977299026159220545774619930013239853136675710920886469956548435005365848645645870909467141354836179726
  // 838332941460066198007445442526427823476074650122634457782368865329932478369373947103366894763249672282311607981163364161762166297004878641805879777571319336905842160739790603863637997197097030298031438143132996776223179
  // 6520838534124572956148722451471102171`
  // const p = `854144886203890648292883727479864913266400168012864587802021104192759591471276439504107803039893962987422053507745900470964368884957988562228668537988174501189861199718761852970727473252762972307391703236631745729090349
  // 152959234725748003825566311974566906174912921962190825959293928991793586155769887675992423186744956403748929401656822797179037897133679830192095736635761208902721076803036742827513304129132874013626714758280124470871071
  // 269309878146084050372639555446458570513039447785453230930025545430144269690932001800622576108908539082690461329395031910823530868348579785467982784396640824888276963018986892942309584432838879357599055079578089852369812
  // 6328132704579817707462133557532637593`
  // const g = `344076424894129119705991481760379887900475734754270706355629795966872366468134732701498822307342825831773138788314987249315229684750350775768380162121055130988445037721014530275120548948487185953616183072074793769085615
  // 408790134048397201272243767202274220010304027111362698556682830069073042552378315621775428651765346866920588569105519693835733402718601539797922120177130806129981969744987977846551487893308882058015295316317645814564558
  // 979540792735957145825314661457075883319266605088341779783483125138944088682482354973073046596819216980803826212044987800860002196932156140663517254006494997194429235772007098796337696375630752335228393075872436387153061
  // 8828486979351760829200176294187580923`

  //const { s, r } = createSignature(new BigInteger(a), new BigInteger(b), new BigInteger(p), new BigInteger(g), message);
  //const { s, r } = createSignature(a, b, p, g, message);
  //const valid = validateSignature(b, p, s, r, g);
  //console.log(encrypt(message, new BigInteger(p)));

  // console.log(a.toString() + '\n', b.toString());

  // console.log(g.toString());
}

elGamal();
